// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "BE_Manage_device/internal/domain/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CheckHeadDep provides a mock function with given fields: depId
func (_m *UserRepository) CheckHeadDep(depId int64) error {
	ret := _m.Called(depId)

	if len(ret) == 0 {
		panic("no return value specified for CheckHeadDep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(depId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckManagerDep provides a mock function with given fields: depId
func (_m *UserRepository) CheckManagerDep(depId int64) error {
	ret := _m.Called(depId)

	if len(ret) == 0 {
		panic("no return value specified for CheckManagerDep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(depId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user *entity.Users) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: email
func (_m *UserRepository) DeleteUser(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserRepository) FindByEmail(email string) (*entity.Users, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Users, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Users); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmailForLogin provides a mock function with given fields: email
func (_m *UserRepository) FindByEmailForLogin(email string) (*entity.Users, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmailForLogin")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Users, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Users); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByToken provides a mock function with given fields: token
func (_m *UserRepository) FindByToken(token string) (*entity.Users, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for FindByToken")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Users, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Users); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserId provides a mock function with given fields: userId
func (_m *UserRepository) FindByUserId(userId int64) (*entity.Users, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserId")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Users, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Users); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with no fields
func (_m *UserRepository) GetAllUser() []*entity.Users {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllUser")
	}

	var r0 []*entity.Users
	if rf, ok := ret.Get(0).(func() []*entity.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Users)
		}
	}

	return r0
}

// GetAllUserOfDepartment provides a mock function with given fields: departmentTd
func (_m *UserRepository) GetAllUserOfDepartment(departmentTd int64) ([]*entity.Users, error) {
	ret := _m.Called(departmentTd)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserOfDepartment")
	}

	var r0 []*entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*entity.Users, error)); ok {
		return rf(departmentTd)
	}
	if rf, ok := ret.Get(0).(func(int64) []*entity.Users); ok {
		r0 = rf(departmentTd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(departmentTd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDB provides a mock function with no fields
func (_m *UserRepository) GetDB() *gorm.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// GetUserAssetManageOfDepartment provides a mock function with given fields: departmentId
func (_m *UserRepository) GetUserAssetManageOfDepartment(departmentId int64) (*entity.Users, error) {
	ret := _m.Called(departmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAssetManageOfDepartment")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Users, error)); ok {
		return rf(departmentId)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Users); ok {
		r0 = rf(departmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(departmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UserRepository) Update(user *entity.Users) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCanExport provides a mock function with given fields: id, canExport
func (_m *UserRepository) UpdateCanExport(id int64, canExport bool) error {
	ret := _m.Called(id, canExport)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCanExport")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, bool) error); ok {
		r0 = rf(id, canExport)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDepartment provides a mock function with given fields: userId, departmentId
func (_m *UserRepository) UpdateDepartment(userId int64, departmentId int64) error {
	ret := _m.Called(userId, departmentId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDepartment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(userId, departmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHeadDep provides a mock function with given fields: id, isHead
func (_m *UserRepository) UpdateHeadDep(id int64, isHead bool) error {
	ret := _m.Called(id, isHead)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHeadDep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, bool) error); ok {
		r0 = rf(id, isHead)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateManagerDep provides a mock function with given fields: id, isManager
func (_m *UserRepository) UpdateManagerDep(id int64, isManager bool) error {
	ret := _m.Called(id, isManager)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagerDep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, bool) error); ok {
		r0 = rf(id, isManager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: user
func (_m *UserRepository) UpdatePassword(user *entity.Users) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserRepository) UpdateUser(user *entity.Users) (*entity.Users, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *entity.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Users) (*entity.Users, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entity.Users) *entity.Users); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Users) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
